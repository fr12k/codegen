package gen

import (
	"encoding/json"
	"fmt"
	"os"
	"regexp"

	"github.com/gdexlab/go-render/render"
)

// AsStructCode generates a struct code from a json file
func AsStructCode(file string, d any) string {
	jsonStr, err := os.ReadFile(file)
	if err != nil {
		panic(err)
	}

	err = json.Unmarshal(jsonStr, d)
	if err != nil {
		panic(err)
	}
	output := render.AsCode(d)

	// format nils as runable code e.g. (&render.innerStruct)(nil), -> nil,
	re := regexp.MustCompile(`\([*&\w]*.[\w]*\)\(nil\)`)
	output = re.ReplaceAllString(output, "nil")

	// format struct fields on new lines
	re = regexp.MustCompile(`({|, )`)
	output = re.ReplaceAllString(output, "$1\n")

	// Define the regular expression pattern
	pattern := `(?m)(\"(?:[^\"\\]|\\.)*\")`

	// Compile the regular expression
	re = regexp.MustCompile(pattern)

	// Replace new lines within quoted strings with spaces
	output = re.ReplaceAllStringFunc(output, func(match string) string {
		return regexp.MustCompile(`\n`).ReplaceAllString(match, "")
	})

	return output
}

type CodeGenerator struct {
	JsonFile        string
	PackageName     string
	CodeFile        string
	ImportCode      string
	StructDefintion string
	Struct          any
}

func (c *CodeGenerator) WriteStructFile() {
	fmt.Printf("Generating %s\n", c.CodeFile)

	result := AsStructCode(c.JsonFile, c.Struct)

	f, err := Create(c.CodeFile)
	if err != nil {
		panic(err)
	}
	defer func() {
		err := f.Close()
		if err != nil {
			panic(err)
		}
	}()

	_, err = f.WriteString(fmt.Sprintf(`package %s
// Code generated by %s DO NOT EDIT.

%s

%s%s`, c.PackageName, c.CodeFile, c.ImportCode, c.StructDefintion, result))
	if err != nil {
		panic(err)
	}
}
