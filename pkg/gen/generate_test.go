package gen

import (
	"fmt"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
)

type testStruct struct {
	Name string `json:"name"`
	Age  int    `json:"age"`
}

type invalidStruct struct {
	Field string
}

func givenJsonFile(t *testing.T) (string, func()) {
	// Create a temporary JSON file for testing
	jsonFile, err := os.CreateTemp(t.TempDir(), "test.json")
	assert.NoError(t, err)

	jsonData := `{"name": "John", "age": 30}`
	err = os.WriteFile(jsonFile.Name(), []byte(jsonData), 0644)
	assert.NoError(t, err)
	return jsonFile.Name(), func() {
		_ = jsonFile.Close()
		_ = os.Remove(jsonFile.Name())
	}
}

func TestAsStructCode(t *testing.T) {
	jsonFile, f := givenJsonFile(t)
	defer f()

	code := AsStructCode(jsonFile, &testStruct{})

	assert.Equal(t, "&gen.testStruct{\nName:\"John\", \nAge:30}", code)
}

func TestAsStructCodeUnmarshalError(t *testing.T) {
	jsonFile, f := givenJsonFile(t)
	defer f()

	assert.Panics(t, func() {
		AsStructCode(jsonFile, invalidStruct{})
	})
}

func TestWriteStructFile(t *testing.T) {
	jsonFile, f := givenJsonFile(t)
	defer f()

	// Create a temporary code file for testing
	codeFile, err := os.CreateTemp(t.TempDir(), "test.go")
	defer func() {
		_ = codeFile.Close()
		_ = os.Remove(codeFile.Name())
	}()
	assert.NoError(t, err)

	codeGen := &CodeGenerator{
		JsonFile:    jsonFile,
		CodeFile:    codeFile.Name(),
		Struct:      &testStruct{},
		PackageName: "home",
		ImportCode: `import (
	"github.com/fr12k/home"
)`,
		StructDefintion: "var responseHome =",
	}

	codeGen.WriteStructFile()

	b, err := os.ReadFile(codeFile.Name())
	assert.NoError(t, err)

	assert.Equal(t, fmt.Sprintf(code, codeFile.Name()), string(b))
}

func TestWriteStructFileError(t *testing.T) {
	jsonFile, f := givenJsonFile(t)
	defer f()

	codeGen := &CodeGenerator{
		JsonFile:    jsonFile,
		CodeFile:    "/invalid/path/test.go",
		Struct:      &testStruct{},
		PackageName: "home",
		ImportCode: `import (
	"github.com/fr12k/home"
)`,
		StructDefintion: "var responseHome =",
	}

	assert.Panics(t, func() {
		codeGen.WriteStructFile()
	})
}

func TestWriteStructFileJsonError(t *testing.T) {

	// Create a temporary code file for testing
	codeFile, err := os.CreateTemp(t.TempDir(), "test.go")
	defer func() {
		_ = codeFile.Close()
		_ = os.Remove(codeFile.Name())
	}()
	assert.NoError(t, err)

	err = os.Chmod(codeFile.Name(), 0400) // Set file to read-only
	assert.NoError(t, err)

	codeGen := &CodeGenerator{
		JsonFile:    "/invalid/path/test.json",
		CodeFile:    "/invalid/path/test.go",
		Struct:      &testStruct{},
		PackageName: "home",
		ImportCode: `import (
	"github.com/fr12k/home"
)`,
		StructDefintion: "var responseHome =",
	}

	assert.Panics(t, func() {
		codeGen.WriteStructFile()
	})
}

func TestWriteStructFileWriteError(t *testing.T) {

	setup = func(_ string) (File, error) {
		return &MockFile{
			CloseFunc: func() error {
				return nil
			},
			WriteStringFunc: func(_ string) (int, error) {
				return 0, fmt.Errorf("error writing to file")
			},
		}, nil
	}

	jsonFile, f := givenJsonFile(t)
	defer f()

	// Create a temporary code file for testing
	codeFile, err := os.CreateTemp(t.TempDir(), "test.go")
	defer func() {
		_ = codeFile.Close()
		_ = os.Remove(codeFile.Name())
	}()
	assert.NoError(t, err)

	codeGen := &CodeGenerator{
		JsonFile:    jsonFile,
		CodeFile:    codeFile.Name(),
		Struct:      &testStruct{},
		PackageName: "home",
		ImportCode: `import (
	"github.com/fr12k/home"
)`,
		StructDefintion: "var responseHome =",
	}

	assert.Panics(t, func() {
		codeGen.WriteStructFile()
	})
}

const code = `package home
// Code generated by %s DO NOT EDIT.

import (
	"github.com/fr12k/home"
)

var responseHome =&gen.testStruct{
Name:"John", 
Age:30}`
